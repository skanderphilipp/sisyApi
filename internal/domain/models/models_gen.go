// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
)

type Artist struct {
	ID                    uuid.UUID      `json:"id"`
	Name                  string         `json:"name"`
	Location              *string        `json:"location,omitempty"`
	City                  *string        `json:"city,omitempty"`
	Country               *string        `json:"country,omitempty"`
	AvatarURL             *string        `json:"avatarUrl,omitempty"`
	FirstName             *string        `json:"firstName,omitempty"`
	LastName              *string        `json:"lastName,omitempty"`
	FullName              *string        `json:"fullName,omitempty"`
	Username              *string        `json:"username,omitempty"`
	Description           *string        `json:"description,omitempty"`
	SoundcloudID          *int           `json:"soundcloudId,omitempty"`
	SoundcloudPermalink   *string        `json:"soundcloudPermalink,omitempty"`
	SoundcloudPromotedSet *string        `json:"soundcloudPromotedSet,omitempty"`
	SocialMediaLinks      []*SocialMedia `json:"socialMediaLinks,omitempty"`
}

type ArtistConnection struct {
	Edges    []*ArtistEdge `json:"edges,omitempty"`
	PageInfo *PageInfo     `json:"pageInfo,omitempty"`
}

type ArtistEdge struct {
	Node   *Artist `json:"node,omitempty"`
	Cursor *string `json:"cursor,omitempty"`
}

type ArtistSearchInput struct {
	SearchTerm *string `json:"searchTerm,omitempty"`
	After      *string `json:"after,omitempty"`
	First      *int    `json:"first,omitempty"`
}

type CreateArtistInput struct {
	Name                  string                    `json:"name"`
	Location              *string                   `json:"location,omitempty"`
	SoundcloudPromotedSet *string                   `json:"soundcloudPromotedSet,omitempty"`
	SoundcloudPermalink   *string                   `json:"soundcloudPermalink,omitempty"`
	SocialMedia           []*CreateSocialMediaInput `json:"socialMedia,omitempty"`
}

type CreateEventInput struct {
	VenueID   uuid.UUID `json:"venueID"`
	StartDate time.Time `json:"startDate"`
	EndDate   time.Time `json:"endDate"`
}

type CreateSocialMediaInput struct {
	Platform SocialMediaPlatform `json:"platform"`
	Link     string              `json:"link"`
}

type CreateStageInput struct {
	Name    string    `json:"name"`
	VenueID uuid.UUID `json:"venueID"`
}

type CreateTimetableEntryInput struct {
	EventID    uuid.UUID  `json:"eventID"`
	StageID    uuid.UUID  `json:"stageID"`
	ArtistID   uuid.UUID  `json:"artistID"`
	WeekNumber *int       `json:"weekNumber,omitempty"`
	Year       *int       `json:"year,omitempty"`
	Day        *string    `json:"day,omitempty"`
	StartTime  *time.Time `json:"startTime,omitempty"`
	EndTime    *time.Time `json:"endTime,omitempty"`
}

type CreateVenueInput struct {
	Name        string                   `json:"name"`
	Description *string                  `json:"description,omitempty"`
	Stages      []*CreateVenueStageInput `json:"stages,omitempty"`
}

type CreateVenueStageInput struct {
	Name string `json:"name"`
}

type DeleteArtistInput struct {
	ID uuid.UUID `json:"id"`
}

type DeleteEventInput struct {
	ID uuid.UUID `json:"id"`
}

type DeleteSocialMediaInput struct {
	ID uuid.UUID `json:"id"`
}

type DeleteTimetableEntryInput struct {
	ID uuid.UUID `json:"id"`
}

type Event struct {
	ID        uuid.UUID         `json:"id"`
	Venue     *Venue            `json:"venue"`
	StartDate time.Time         `json:"startDate"`
	EndDate   time.Time         `json:"endDate"`
	Timetable []*TimetableEntry `json:"timetable,omitempty"`
}

type EventConnection struct {
	Edges    []*EventEdge `json:"edges,omitempty"`
	PageInfo *PageInfo    `json:"pageInfo,omitempty"`
}

type EventEdge struct {
	Cursor *string `json:"cursor,omitempty"`
	Node   *Event  `json:"node,omitempty"`
}

type PageInfo struct {
	EndCursor   *string `json:"endCursor,omitempty"`
	HasNextPage *bool   `json:"hasNextPage,omitempty"`
}

type SocialMedia struct {
	ID       uuid.UUID           `json:"id"`
	Platform SocialMediaPlatform `json:"platform"`
	Link     string              `json:"link"`
	ArtistID uuid.UUID           `json:"artistId"`
}

type Stage struct {
	ID      uuid.UUID `json:"id"`
	Name    string    `json:"name"`
	VenueID uuid.UUID `json:"venueID"`
}

type TimeTableEntryEdge struct {
	Cursor string          `json:"cursor"`
	Node   *TimetableEntry `json:"node"`
}

type TimetableEntry struct {
	ID         uuid.UUID  `json:"id"`
	EventID    uuid.UUID  `json:"eventID"`
	StageID    uuid.UUID  `json:"stageID"`
	Stage      *Stage     `json:"stage,omitempty"`
	ArtistID   uuid.UUID  `json:"artistID"`
	Artist     *Artist    `json:"artist,omitempty"`
	WeekNumber *int       `json:"weekNumber,omitempty"`
	Year       *int       `json:"year,omitempty"`
	Day        *string    `json:"day,omitempty"`
	StartTime  *time.Time `json:"startTime,omitempty"`
	EndTime    *time.Time `json:"endTime,omitempty"`
}

type TimetableEntryConnection struct {
	Edges    []*TimetableEntry `json:"edges"`
	PageInfo *PageInfo         `json:"pageInfo"`
}

type UpdateArtistInput struct {
	ID                    uuid.UUID                 `json:"id"`
	Name                  *string                   `json:"name,omitempty"`
	Location              *string                   `json:"location,omitempty"`
	SoundcloudPromotedSet *string                   `json:"soundcloudPromotedSet,omitempty"`
	SoundcloudPermalink   *string                   `json:"soundcloudPermalink,omitempty"`
	SocialMedia           []*UpdateSocialMediaInput `json:"socialMedia,omitempty"`
}

type UpdateSocialMediaInput struct {
	ID       uuid.UUID            `json:"id"`
	Platform *SocialMediaPlatform `json:"platform,omitempty"`
	Link     *string              `json:"link,omitempty"`
}

type Venue struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description *string   `json:"description,omitempty"`
	Stages      []*Stage  `json:"stages,omitempty"`
}

type VenueConnection struct {
	Edges    []*VenueEdge `json:"edges"`
	PageInfo *PageInfo    `json:"pageInfo"`
}

type VenueEdge struct {
	Node   *Venue `json:"node"`
	Cursor string `json:"cursor"`
}

type SocialMediaPlatform string

const (
	SocialMediaPlatformTwitter         SocialMediaPlatform = "Twitter"
	SocialMediaPlatformFacebook        SocialMediaPlatform = "Facebook"
	SocialMediaPlatformInstagram       SocialMediaPlatform = "Instagram"
	SocialMediaPlatformYouTube         SocialMediaPlatform = "YouTube"
	SocialMediaPlatformSoundcloud      SocialMediaPlatform = "Soundcloud"
	SocialMediaPlatformResidentAdvisor SocialMediaPlatform = "ResidentAdvisor"
)

var AllSocialMediaPlatform = []SocialMediaPlatform{
	SocialMediaPlatformTwitter,
	SocialMediaPlatformFacebook,
	SocialMediaPlatformInstagram,
	SocialMediaPlatformYouTube,
	SocialMediaPlatformSoundcloud,
	SocialMediaPlatformResidentAdvisor,
}

func (e SocialMediaPlatform) IsValid() bool {
	switch e {
	case SocialMediaPlatformTwitter, SocialMediaPlatformFacebook, SocialMediaPlatformInstagram, SocialMediaPlatformYouTube, SocialMediaPlatformSoundcloud, SocialMediaPlatformResidentAdvisor:
		return true
	}
	return false
}

func (e SocialMediaPlatform) String() string {
	return string(e)
}

func (e *SocialMediaPlatform) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SocialMediaPlatform(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SocialMediaPlatform", str)
	}
	return nil
}

func (e SocialMediaPlatform) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
