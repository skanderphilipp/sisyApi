// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"time"
	"gorm.io/gorm"
	"github.com/google/uuid"
)

// Artist represents an artist in the system.
type Artist struct {
	ID                uuid.UUID      `gorm:"type:uuid;primary_key;default:gen_random_uuid()" json:"id"`
	Name              string         `gorm:"type:varchar(100);not null" json:"name"`
	Location          *string        `json:"location,omitempty"`
	SoundcloudSetLink *string        `json:"soundcloudSetLink,omitempty"`
	SocialMediaLinks  []*SocialMedia `gorm:"foreignKey:ArtistID" json:"socialMediaLinks,omitempty"`
	CreatedAt         time.Time      `json:"-"`
	UpdatedAt         time.Time      `json:"-"`
	DeletedAt         gorm.DeletedAt `gorm:"index" json:"-"`
	// Additional GORM Model fields like CreatedAt, UpdatedAt can be added here if needed.
}

type ArtistConnection struct {
	Edges    []*ArtistEdge `json:"edges,omitempty"`
	PageInfo *PageInfo     `json:"pageInfo,omitempty"`
}

type ArtistEdge struct {
	Node   *Artist `json:"node,omitempty"`
	Cursor *string `json:"cursor,omitempty"`
}

type ArtistSearchInput struct {
	SearchTerm *string `json:"searchTerm,omitempty"`
	After      *string `json:"after,omitempty"`
	First      *int    `json:"first,omitempty"`
}

type CreateArtistInput struct {
	Name              string                    `json:"name"`
	Location          *string                   `json:"location,omitempty"`
	SoundcloudSetLink *string                   `json:"soundcloudSetLink,omitempty"`
	SocialMedia       []*CreateSocialMediaInput `json:"socialMedia,omitempty"`
}

type CreateEventInput struct {
	VenueID   uuid.UUID `json:"venueID"`
	StartDate time.Time `json:"startDate"`
	EndDate   time.Time `json:"endDate"`
}

type CreateSocialMediaInput struct {
	Platform string `json:"platform"`
	Link     string `json:"link"`
}

type CreateStageInput struct {
	StageName string    `json:"stageName"`
	VenueID   uuid.UUID `json:"venueID"`
}

type CreateTimetableEntryInput struct {
	EventID    uuid.UUID  `json:"eventID"`
	StageID    uuid.UUID  `json:"stageID"`
	ArtistID   uuid.UUID  `json:"artistID"`
	WeekNumber *int       `json:"weekNumber,omitempty"`
	Year       *int       `json:"year,omitempty"`
	Day        *string    `json:"day,omitempty"`
	StartTime  *time.Time `json:"startTime,omitempty"`
	EndTime    *time.Time `json:"endTime,omitempty"`
}

type CreateVenueInput struct {
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
}

type DeleteArtistInput struct {
	ID uuid.UUID `json:"id"`
}

type DeleteEventInput struct {
	ID uuid.UUID `json:"id"`
}

type DeleteSocialMediaInput struct {
	ID uuid.UUID `json:"id"`
}

type Event struct {
	ID        uuid.UUID         `gorm:"type:uuid;primary_key;default:gen_random_uuid()" json:"id"`
	VenueID          uuid.UUID  `gorm:"type:uuid;not null" json:"venueID"`
  Venue            *Venue     `gorm:"foreignKey:VenueID" json:"venue"`
	StartDate time.Time         `gorm:"not null" json:"startDate"`
	EndDate   time.Time         `gorm:"not null" json:"endDate"`
	Timetable        []*TimetableEntry            `json:"timetable,omitempty"`
	TimetableByStage []*StageWithTimetableEntries `json:"timetableByStage,omitempty" gorm:"-"`
		//gorm additinonal fields
	CreatedAt time.Time      `json:"-"`
	UpdatedAt time.Time      `json:"-"`
	DeletedAt gorm.DeletedAt `gorm:"index" json:"-"`
}

type EventConnection struct {
	Edges    []*EventEdge `json:"edges,omitempty"`
	PageInfo *PageInfo    `json:"pageInfo,omitempty"`
}

type EventEdge struct {
	Cursor *string `json:"cursor,omitempty"`
	Node   *Event  `json:"node,omitempty"`
}

type PageInfo struct {
	EndCursor   *string `json:"endCursor,omitempty"`
	HasNextPage *bool   `json:"hasNextPage,omitempty"`
}

type SocialMedia struct {
	ID       uuid.UUID `json:"id"`
	Platform string    `json:"platform"`
	Link     string    `json:"link"`
	ArtistID uuid.UUID `json:"artistId"`
}

// Stage represents a stage in a venue.
type Stage struct {
	ID        uuid.UUID `gorm:"type:uuid;primary_key;default:gen_random_uuid()" json:"id"`
	StageName string    `gorm:"type:varchar(100);not null" json:"stageName"`
	VenueID   uuid.UUID `gorm:"type:uuid;foreignKey:VenueID" json:"venueID"`
	//gorm additinonal fields
	CreatedAt time.Time      `json:"-"`
	UpdatedAt time.Time      `json:"-"`
	DeletedAt gorm.DeletedAt `gorm:"index" json:"-"`
	// Additional fields like CreatedAt, UpdatedAt can be added.
}

type StageWithTimetableEntries struct {
	StageId uuid.UUID				 `json:"stageId"`
	Stage   *Stage            `json:"stage"`
	Entries []*TimetableEntry `json:"entries"`
}

type TimetableEntry struct {
	ID         uuid.UUID  `gorm:"type:uuid;primary_key;default:gen_random_uuid()" json:"id"`
	EventID    uuid.UUID  `gorm:"type:uuid;foreignKey:EventID" json:"eventID"`
	StageID    uuid.UUID  `gorm:"type:uuid;foreignKey:StageID" json:"stageID"`
	Stage      *Stage     `json:"stage,omitempty"`
	ArtistID   uuid.UUID  `gorm:"type:uuid;foreignKey:ArtistID" json:"artistID"`
	Artist     *Artist    `json:"artist,omitempty"`
	WeekNumber *int       `json:"weekNumber,omitempty"`
	Year       *int       `json:"year,omitempty"`
	Day        *string    `json:"day,omitempty"`
	StartTime  *time.Time `json:"startTime,omitempty"`
	EndTime    *time.Time `json:"endTime,omitempty"`
	//gorm additinonal fields
	CreatedAt time.Time      `json:"-"`
	UpdatedAt time.Time      `json:"-"`
	DeletedAt gorm.DeletedAt `gorm:"index" json:"-"`
	// Additional fields like CreatedAt, UpdatedAt can be added.
}

type UpdateArtistInput struct {
	ID                uuid.UUID                 `json:"id"`
	Name              *string                   `json:"name,omitempty"`
	Location          *string                   `json:"location,omitempty"`
	SoundcloudSetLink *string                   `json:"soundcloudSetLink,omitempty"`
	SocialMedia       []*UpdateSocialMediaInput `json:"socialMedia,omitempty"`
}

type UpdateSocialMediaInput struct {
	ID       uuid.UUID `json:"id"`
	Platform *string   `json:"platform,omitempty"`
	Link     *string   `json:"link,omitempty"`
}

type Venue struct {
	ID          uuid.UUID `gorm:"type:uuid;primary_key;default:gen_random_uuid()" json:"id"`
	Name        string    `gorm:"type:varchar(100);not null" json:"name"`
	Description *string   `json:"description,omitempty"`
	Stages      []*Stage  `gorm:"foreignKey:VenueID" json:"stages,omitempty"`
	//gorm additinonal fields
	CreatedAt time.Time      `json:"-"`
	UpdatedAt time.Time      `json:"-"`
	DeletedAt gorm.DeletedAt `gorm:"index" json:"-"`
	// Additional fields like CreatedAt, UpdatedAt can be added.
}


// BeforeCreate will set a UUID rather than numeric ID.
func (artist *Artist) BeforeCreate(tx *gorm.DB) (err error) {
    if artist.ID == uuid.Nil {
        artist.ID = uuid.New()
    }
    return
}

// Event BeforeCreate hook
func (e *Event) BeforeCreate(tx *gorm.DB) (err error) {
    if e.ID == uuid.Nil {
        e.ID = uuid.New()
    }
    return
}

// SocialMedia BeforeCreate hook
func (sm *SocialMedia) BeforeCreate(tx *gorm.DB) (err error) {
    if sm.ID == uuid.Nil {
        sm.ID = uuid.New()
    }
    return
}

// Venue BeforeCreate hook
func (v *Venue) BeforeCreate(tx *gorm.DB) (err error) {
    if v.ID == uuid.Nil {
        v.ID = uuid.New()
    }
    return
}

// Stage BeforeCreate hook
func (s *Stage) BeforeCreate(tx *gorm.DB) (err error) {
    if s.ID == uuid.Nil {
        s.ID = uuid.New()
    }
    return
}

// TimetableEntry BeforeCreate hook
func (te *TimetableEntry) BeforeCreate(tx *gorm.DB) (err error) {
    if te.ID == uuid.Nil {
        te.ID = uuid.New()
    }
    return
}

type VenueConnection struct {
	Edges    []*VenueEdge `json:"edges"`
	PageInfo *PageInfo    `json:"pageInfo"`
}

type VenueEdge struct {
	Node   *Venue `json:"node"`
	Cursor string `json:"cursor"`
}
